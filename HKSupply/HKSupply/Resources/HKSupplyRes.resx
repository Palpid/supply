<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="Age" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="BillingAddress" xml:space="preserve">
    <value>Billing Address</value>
  </data>
  <data name="Caliber" xml:space="preserve">
    <value>Caliber</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CellDataError" xml:space="preserve">
    <value>This is not a valid value for this column</value>
  </data>
  <data name="Color1" xml:space="preserve">
    <value>Color 1</value>
  </data>
  <data name="Color2" xml:space="preserve">
    <value>Color 2</value>
  </data>
  <data name="Comments" xml:space="preserve">
    <value>Comments</value>
  </data>
  <data name="ContactName" xml:space="preserve">
    <value>Contact Name</value>
  </data>
  <data name="ContactPhone" xml:space="preserve">
    <value>Contact Phone</value>
  </data>
  <data name="CreateDate" xml:space="preserve">
    <value>Create Date</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="CustomerName" xml:space="preserve">
    <value>Customer Name</value>
  </data>
  <data name="DBServerConnectionError" xml:space="preserve">
    <value>Database Server Connection Error</value>
  </data>
  <data name="DefaultSupplier" xml:space="preserve">
    <value>Default Supplier</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DocType" xml:space="preserve">
    <value>Doc Type</value>
  </data>
  <data name="FieldRequired" xml:space="preserve">
    <value>This field is required</value>
  </data>
  <data name="FileDoesntExist" xml:space="preserve">
    <value>File doesn't exist</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>File Name</value>
  </data>
  <data name="FormNotFound" xml:space="preserve">
    <value>Form not found</value>
  </data>
  <data name="FunctionalityAlreadyExist" xml:space="preserve">
    <value>Functionality Already Exist</value>
  </data>
  <data name="FunctionalityRoleAlreadyExist" xml:space="preserve">
    <value>Functionality-Role Already Exist</value>
  </data>
  <data name="HwTypeL1" xml:space="preserve">
    <value>Hw Type L1</value>
  </data>
  <data name="HwTypeL2" xml:space="preserve">
    <value>Hw Type L2</value>
  </data>
  <data name="HwTypeL3" xml:space="preserve">
    <value>Hw Type L3</value>
  </data>
  <data name="IdCustomer" xml:space="preserve">
    <value>Id Customer</value>
  </data>
  <data name="IdModel" xml:space="preserve">
    <value>Id Model</value>
  </data>
  <data name="IdPrototype" xml:space="preserve">
    <value>Id Prototype</value>
  </data>
  <data name="IdSupplier" xml:space="preserve">
    <value>Id Supplier</value>
  </data>
  <data name="Incoterm" xml:space="preserve">
    <value>Incoterm</value>
  </data>
  <data name="InvalidId" xml:space="preserve">
    <value>Invalid ID</value>
  </data>
  <data name="InvalidLogin" xml:space="preserve">
    <value>Invalid login</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid Password</value>
  </data>
  <data name="InvalidUser" xml:space="preserve">
    <value>Invalid user</value>
  </data>
  <data name="ItemBCN" xml:space="preserve">
    <value>Item BCN</value>
  </data>
  <data name="ItemDescription" xml:space="preserve">
    <value>Item Description</value>
  </data>
  <data name="ItemHK" xml:space="preserve">
    <value>Item HK</value>
  </data>
  <data name="ItemSubver" xml:space="preserve">
    <value>Item Subver</value>
  </data>
  <data name="ItemVer" xml:space="preserve">
    <value>Item Ver</value>
  </data>
  <data name="LaunchDate" xml:space="preserve">
    <value>Launch Date</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LoginMandatory" xml:space="preserve">
    <value>Login mandatory</value>
  </data>
  <data name="MaterialL1" xml:space="preserve">
    <value>Material L1</value>
  </data>
  <data name="MaterialL2" xml:space="preserve">
    <value>Material L2</value>
  </data>
  <data name="MaterialL3" xml:space="preserve">
    <value>Material L3</value>
  </data>
  <data name="MatTypeL1" xml:space="preserve">
    <value>Mat Type L1</value>
  </data>
  <data name="MatTypeL2" xml:space="preserve">
    <value>Mat Type L2</value>
  </data>
  <data name="MatTypeL3" xml:space="preserve">
    <value>Mat Type L3</value>
  </data>
  <data name="Model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NewPassword" xml:space="preserve">
    <value>New Password</value>
  </data>
  <data name="NewPasswordMandatory" xml:space="preserve">
    <value>New Password Mandatory</value>
  </data>
  <data name="NoCustomerSelected" xml:space="preserve">
    <value>No customer selected</value>
  </data>
  <data name="NoDataSelected" xml:space="preserve">
    <value>No data selected</value>
  </data>
  <data name="NoFileSelected" xml:space="preserve">
    <value>No file selected</value>
  </data>
  <data name="NoFunctionalityExist" xml:space="preserve">
    <value>No Functionality Exist</value>
  </data>
  <data name="NoFunctionalityRoleExist" xml:space="preserve">
    <value>No Functionality-Role Exist</value>
  </data>
  <data name="NoPendingChanges" xml:space="preserve">
    <value>No pending changes</value>
  </data>
  <data name="NoRoleExist" xml:space="preserve">
    <value>No Role Exist</value>
  </data>
  <data name="NoStoreExist" xml:space="preserve">
    <value>No Role Exist</value>
  </data>
  <data name="NullArgument" xml:space="preserve">
    <value>{0} can't be null</value>
  </data>
  <data name="OldPassword" xml:space="preserve">
    <value>Old Password</value>
  </data>
  <data name="OldPasswordError" xml:space="preserve">
    <value>Incorrect Old Password</value>
  </data>
  <data name="OldPasswordMandatory" xml:space="preserve">
    <value>Old Password Mandatory</value>
  </data>
  <data name="OpenFileQuestion" xml:space="preserve">
    <value>Do you want to open the file?</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordChangedSuccessfully" xml:space="preserve">
    <value>Password changed successfully</value>
  </data>
  <data name="PasswordMandatory" xml:space="preserve">
    <value>Password mandatory</value>
  </data>
  <data name="PaymentTerms" xml:space="preserve">
    <value>Payment Terms</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="PrototypeDescription" xml:space="preserve">
    <value>Prototype Description</value>
  </data>
  <data name="PrototypeName" xml:space="preserve">
    <value>Prototype Name</value>
  </data>
  <data name="PrototypeStatus" xml:space="preserve">
    <value>Prototype Status</value>
  </data>
  <data name="RemovalDate" xml:space="preserve">
    <value>Removal Date</value>
  </data>
  <data name="RepeatPassword" xml:space="preserve">
    <value>Repeat Password</value>
  </data>
  <data name="RepeatPasswordError" xml:space="preserve">
    <value>Repeat Password Incorrect</value>
  </data>
  <data name="RepeatPasswordMandatory" xml:space="preserve">
    <value>Repeat Password Mandatory</value>
  </data>
  <data name="ResetPassword" xml:space="preserve">
    <value>Reset Password</value>
  </data>
  <data name="RoleAlreadyExist" xml:space="preserve">
    <value>Role Already Exist</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveChanges" xml:space="preserve">
    <value>Save changes?</value>
  </data>
  <data name="SaveSuccessfully" xml:space="preserve">
    <value>Save Successfully</value>
  </data>
  <data name="Segment" xml:space="preserve">
    <value>Segment</value>
  </data>
  <data name="SelectDocType" xml:space="preserve">
    <value>Select doc type</value>
  </data>
  <data name="ShippingAddress" xml:space="preserve">
    <value>Shipping Address</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="StatusCial" xml:space="preserve">
    <value>Status Cial</value>
  </data>
  <data name="StatusProd" xml:space="preserve">
    <value>Status Prod</value>
  </data>
  <data name="StoreAlreadyExist" xml:space="preserve">
    <value>Store Already Exist</value>
  </data>
  <data name="Supplier" xml:space="preserve">
    <value>Supplier</value>
  </data>
  <data name="SupplierName" xml:space="preserve">
    <value>Supplier Name</value>
  </data>
  <data name="VATNumber" xml:space="preserve">
    <value>VAT Number</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="ViewItemPriceList" xml:space="preserve">
    <value>View Item price list</value>
  </data>
  <data name="Currency1" xml:space="preserve">
    <value>Currency 1</value>
  </data>
  <data name="Currency2" xml:space="preserve">
    <value>Currency 2</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DescriptionChinese" xml:space="preserve">
    <value>Description (Chinese)</value>
  </data>
  <data name="ExchangeRateUsed" xml:space="preserve">
    <value>Exchange Rate Used</value>
  </data>
  <data name="FamilyHk" xml:space="preserve">
    <value>Family HK</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="IdFamilyHk" xml:space="preserve">
    <value>Id Family HK</value>
  </data>
  <data name="IdIncoterm" xml:space="preserve">
    <value>Id Incoterm</value>
  </data>
  <data name="IdPaymentTerms" xml:space="preserve">
    <value>Id Payment Terms</value>
  </data>
  <data name="IncrLot" xml:space="preserve">
    <value>Incr Lot</value>
  </data>
  <data name="LeadTime" xml:space="preserve">
    <value>Lead Time</value>
  </data>
  <data name="MinLot" xml:space="preserve">
    <value>Min Lot</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceBaseCurrency" xml:space="preserve">
    <value>Price Base Currency</value>
  </data>
  <data name="Ratio" xml:space="preserve">
    <value>Ratio</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Scrap" xml:space="preserve">
    <value>Scrap</value>
  </data>
</root>